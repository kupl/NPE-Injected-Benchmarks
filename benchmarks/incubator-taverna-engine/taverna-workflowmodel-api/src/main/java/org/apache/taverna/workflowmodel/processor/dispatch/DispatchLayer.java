/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements. See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership. The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied. See the License for the
* specific language governing permissions and limitations
* under the License.
*/

package org.apache.taverna.workflowmodel.processor.dispatch;

import org.apache.taverna.workflowmodel.Configurable;
import org.apache.taverna.workflowmodel.processor.dispatch.events.DispatchCompletionEvent;
import org.apache.taverna.workflowmodel.processor.dispatch.events.DispatchErrorEvent;
import org.apache.taverna.workflowmodel.processor.dispatch.events.DispatchJobEvent;
import org.apache.taverna.workflowmodel.processor.dispatch.events.DispatchJobQueueEvent;
import org.apache.taverna.workflowmodel.processor.dispatch.events.DispatchResultEvent;

/**
 * Layers within the dispatch stack define a control flow to handle dispatch of
 * jobs from a queue (generated by the iteration system) to appropriate
 * activities.
 * <p>
 * A dispatch layer can receive a reference to the Queue and a set of
 * Activities, or a single Job and a set of Activities from the layer above it
 * (or from the DispatchStackImpl object itself if this is the top layer). It
 * can receive errors, results and partial or total completion events from the
 * layer immediately below it.
 * <p>
 * To assist in graphical representation of the dispatch configuration each
 * layer declares for each class of message whether it intercepts and alters,
 * intercepts and observes or ignores (forwards) the message onto the next layer
 * (either up or down depending on the message) and whether the layer is capable
 * of instigating the creation of each class of message.
 * 
 * @author Tom Oinn
 */
public interface DispatchLayer<ConfigurationType> extends
		Configurable<ConfigurationType> {
	/**
	 * Receive a pointer to the job queue along with a set of activities, this
	 * is received from the layer above in the dispatch stack or from the
	 * DispatchStackImpl object itself if this is the top layer.
	 */
	void receiveJobQueue(DispatchJobQueueEvent queueEvent);

	/**
	 * Receive a single job and associated set of activities from the layer
	 * above
	 */
	void receiveJob(DispatchJobEvent jobEvent);

	/**
	 * Receive a single error reference from the layer below
	 */
	void receiveError(DispatchErrorEvent errorEvent);

	/**
	 * Receive a result from the layer below
	 */
	void receiveResult(DispatchResultEvent resultEvent);

	/**
	 * Receive a (possibly partial) completion event from the layer below. This
	 * is only going to be used when the activities invocation is capable of
	 * streaming partial data back up through the dispatch stack before the
	 * activities has completed. Not all dispatch stack layers are compatible
	 * with this mode of operation, for example retry and recursion do not play
	 * well here!
	 */
	void receiveResultCompletion(DispatchCompletionEvent completionEvent);

	/**
	 * Called when there will be no more events with the specified process
	 * identifier, can be used to purge cached state from layers within the
	 * stack
	 */
	void finishedWith(String owningProcess);

	/**
	 * Set the parent dispatch stack of this layer, this is called when a layer
	 * is added to the dispatch stack and can be safely ignored by end users of
	 * this API
	 */
	void setDispatchStack(DispatchStack stack);
}
